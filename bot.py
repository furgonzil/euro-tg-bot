import requests
from bs4 import BeautifulSoup
from telegram import Bot, Update, ReplyKeyboardMarkup
from telegram.ext import Application, CommandHandler, MessageHandler, filters, ContextTypes
from apscheduler.schedulers.background import BackgroundScheduler
from apscheduler.triggers.cron import CronTrigger
import logging
import asyncio
from datetime import datetime, timedelta
import json
import os
import matplotlib.pyplot as plt
import io
import config
from flask import Flask, jsonify
from threading import Thread

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(format="%(asctime)s - %(message)s", level=logging.INFO)

# –¢–æ–∫–µ–Ω –±–æ—Ç–∞
TOKEN = config.TOKEN

# URL —Å–∞–π—Ç–∞
URL = "http://kantor-zawisza.pl/"

# –ì–ª–æ–±–∞–ª—å–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
chat_id = None
scheduler = BackgroundScheduler(timezone="Europe/Minsk")
bot = Bot(token=TOKEN)
is_scheduled = False

# –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö
rate_history = {}
user_settings = {}
favorite_amounts = {}
calculation_history = {}

def load_data():
    global rate_history, user_settings, favorite_amounts, calculation_history
    try:
        if os.path.exists('rate_history.json'):
            with open('rate_history.json', 'r') as f:
                rate_history = json.load(f)
        if os.path.exists('user_settings.json'):
            with open('user_settings.json', 'r') as f:
                user_settings = json.load(f)
        if os.path.exists('favorite_amounts.json'):
            with open('favorite_amounts.json', 'r') as f:
                favorite_amounts = json.load(f)
        if os.path.exists('calculation_history.json'):
            with open('calculation_history.json', 'r') as f:
                calculation_history = json.load(f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –¥–∞–Ω–Ω—ã—Ö: {e}")

def save_data():
    try:
        with open('rate_history.json', 'w') as f:
            json.dump(rate_history, f)
        with open('user_settings.json', 'w') as f:
            json.dump(user_settings, f)
        with open('favorite_amounts.json', 'w') as f:
            json.dump(favorite_amounts, f)
        with open('calculation_history.json', 'w') as f:
            json.dump(calculation_history, f)
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö: {e}")

def get_exchange_rates():
    try:
        response = requests.get(URL)
        response.raise_for_status()
        soup = BeautifulSoup(response.content, "html.parser")

        buy_element = soup.select_one("span.EUR-B strong")
        sell_element = soup.select_one("span.EUR-S strong")

        buy_rate = buy_element.text.strip() if buy_element else None
        sell_rate = sell_element.text.strip() if sell_element else None

        if buy_rate and sell_rate:
            current_time = datetime.now().strftime("%Y-%m-%d %H:%M")
            rate_history[current_time] = {"buy": buy_rate, "sell": sell_rate}
            save_data()
            return buy_rate, sell_rate

        logging.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –∫—É—Ä—Å—ã –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ.")
        return None, None

    except Exception as e:
        logging.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∫—É—Ä—Å–∞: {e}")
        return None, None

def get_rate_trend():
    if len(rate_history) < 2:
        return "üìä", "üìä"
    
    times = sorted(rate_history.keys())
    latest = rate_history[times[-1]]
    previous = rate_history[times[-2]]
    
    buy_trend = "üìà" if float(latest["buy"].replace(",", ".")) > float(previous["buy"].replace(",", ".")) else "üìâ"
    sell_trend = "üìà" if float(latest["sell"].replace(",", ".")) > float(previous["sell"].replace(",", ".")) else "üìâ"
    
    return buy_trend, sell_trend

async def generate_rate_graph():
    try:
        now = datetime.now()
        day_ago = now - timedelta(days=1)
        
        filtered_data = {k: v for k, v in rate_history.items() 
                        if datetime.strptime(k, "%Y-%m-%d %H:%M") > day_ago}
        
        if not filtered_data:
            return None
            
        times = sorted(filtered_data.keys())
        buy_rates = [float(filtered_data[t]["buy"].replace(",", ".")) for t in times]
        sell_rates = [float(filtered_data[t]["sell"].replace(",", ".")) for t in times]
        
        plt.figure(figsize=(10, 6))
        plt.plot(range(len(times)), buy_rates, label='–ü–æ–∫—É–ø–∫–∞', marker='o')
        plt.plot(range(len(times)), sell_rates, label='–ü—Ä–æ–¥–∞–∂–∞', marker='o')
        
        plt.title('–î–∏–Ω–∞–º–∏–∫–∞ –∫—É—Ä—Å–∞ EUR/PLN –∑–∞ 24 —á–∞—Å–∞')
        plt.xlabel('–í—Ä–µ–º—è')
        plt.ylabel('–ö—É—Ä—Å')
        plt.legend()
        plt.grid(True)
        
        plt.xticks(range(len(times)), 
                  [datetime.strptime(t, "%Y-%m-%d %H:%M").strftime("%H:%M") for t in times], 
                  rotation=45)
        
        buf = io.BytesIO()
        plt.savefig(buf, format='png', bbox_inches='tight')
        buf.seek(0)
        plt.close()
        
        return buf
    except Exception as e:
        logging.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –≥—Ä–∞—Ñ–∏–∫–∞: {e}")
        return None

async def send_rates():
    global chat_id
    if chat_id:
        buy_rate, sell_rate = get_exchange_rates()
        if buy_rate and sell_rate:
            buy_trend, sell_trend = get_rate_trend()
            message = (
                f"üí∂ <b>–ö—É—Ä—Å –µ–≤—Ä–æ:</b>\n\n"
                f"{buy_trend} <b>–ü–æ–∫—É–ø–∫–∞:</b> {buy_rate} PLN\n"
                f"{sell_trend} <b>–ü—Ä–æ–¥–∞–∂–∞:</b> {sell_rate} PLN\n\n"
                f"üïí {datetime.now().strftime('%H:%M')}"
            )
        else:
            message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –µ–≤—Ä–æ."
        await bot.send_message(chat_id=chat_id, text=message, parse_mode="HTML")
    else:
        logging.info("chat_id –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global chat_id
    chat_id = str(update.effective_chat.id)
    
    if chat_id not in user_settings:
        user_settings[chat_id] = {
            "notifications": True,
            "favorite_amounts": []
        }
        save_data()

    welcome_message = (
        "üëã <b>–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ Currency Bot!</b>\n\n"
        "ü§ñ –Ø –ø–æ–º–æ–≥—É –≤–∞–º:\n"
        "‚Ä¢ –û—Ç—Å–ª–µ–∂–∏–≤–∞—Ç—å –∫—É—Ä—Å –µ–≤—Ä–æ\n"
        "‚Ä¢ –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç—å —Ä–∞—Å—á–µ—Ç—ã\n"
        "‚Ä¢ –ê–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å —Ç—Ä–µ–Ω–¥—ã\n"
        "‚Ä¢ –°–æ—Ö—Ä–∞–Ω—è—Ç—å –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å—É–º–º—ã\n\n"
        "–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å."
    )
    
    start_keyboard = ReplyKeyboardMarkup([["üöÄ –ù–∞—á–∞—Ç—å"]], resize_keyboard=True)
    await update.message.reply_text(welcome_message, reply_markup=start_keyboard, parse_mode="HTML")

def get_rate_analytics():
    if len(rate_history) < 2:
        return "–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞"
    
    times = sorted(rate_history.keys())
    latest = rate_history[times[-1]]
    
    today = datetime.now().date()
    today_rates = {k: v for k, v in rate_history.items() 
                  if datetime.strptime(k, "%Y-%m-%d %H:%M").date() == today}
    
    if not today_rates:
        return "–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –∑–∞ —Å–µ–≥–æ–¥–Ω—è"
    
    buy_rates = [float(v["buy"].replace(",", ".")) for v in today_rates.values()]
    sell_rates = [float(v["sell"].replace(",", ".")) for v in today_rates.values()]
    
    analysis = (
        f"üìä <b>–ê–Ω–∞–ª–∏–∑ –∫—É—Ä—Å–∞ –∑–∞ —Å–µ–≥–æ–¥–Ω—è:</b>\n\n"
        f"üìà <b>–ü–æ–∫—É–ø–∫–∞:</b>\n"
        f"–ú–∏–Ω: {min(buy_rates):.3f} PLN\n"
        f"–ú–∞–∫—Å: {max(buy_rates):.3f} PLN\n"
        f"–°—Ä–µ–¥–Ω–µ–µ: {sum(buy_rates)/len(buy_rates):.3f} PLN\n\n"
        f"üìâ <b>–ü—Ä–æ–¥–∞–∂–∞:</b>\n"
        f"–ú–∏–Ω: {min(sell_rates):.3f} PLN\n"
        f"–ú–∞–∫—Å: {max(sell_rates):.3f} PLN\n"
        f"–°—Ä–µ–¥–Ω–µ–µ: {sum(sell_rates)/len(sell_rates):.3f} PLN"
    )
    
    return analysis

async def message_handler(update: Update, context: ContextTypes.DEFAULT_TYPE):
    global chat_id, is_scheduled
    text = update.message.text
    user_id = str(update.effective_chat.id)

    if text == "üöÄ –ù–∞—á–∞—Ç—å":
        main_keyboard = ReplyKeyboardMarkup([
            ["üí∂ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"],
            ["üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
            ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
        ], resize_keyboard=True)
        await update.message.reply_text(
            "üéØ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
            reply_markup=main_keyboard,
            parse_mode="HTML"
        )

    elif text == "üí∂ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å":
        buy_rate, sell_rate = get_exchange_rates()
        if buy_rate and sell_rate:
            buy_trend, sell_trend = get_rate_trend()
            message = (
                f"üí∂ <b>–ö—É—Ä—Å –µ–≤—Ä–æ:</b>\n\n"
                f"{buy_trend} <b>–ü–æ–∫—É–ø–∫–∞:</b> {buy_rate} PLN\n"
                f"{sell_trend} <b>–ü—Ä–æ–¥–∞–∂–∞:</b> {sell_rate} PLN\n\n"
                f"üïí –û–±–Ω–æ–≤–ª–µ–Ω–æ {datetime.now().strftime('%H:%M')}"
            )
        else:
            message = "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –µ–≤—Ä–æ."
        await update.message.reply_text(text=message, parse_mode="HTML")

    elif text == "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä":
        calc_keyboard = ReplyKeyboardMarkup([
            ["üí± PLN ‚Üí EUR", "üí± EUR ‚Üí PLN"],
            ["üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤"],
            ["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]
        ], resize_keyboard=True)
        await update.message.reply_text(
            "üßÆ <b>–ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä –≤–∞–ª—é—Ç</b>\n\n"
            "–í—ã–±–µ—Ä–∏—Ç–µ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –∫–æ–Ω–≤–µ—Ä—Ç–∞—Ü–∏–∏:",
            reply_markup=calc_keyboard,
            parse_mode="HTML"
        )

    elif text == "üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞":
        analysis = get_rate_analytics()
        stats_keyboard = ReplyKeyboardMarkup([
            ["üìà –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞"],
            ["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]
        ], resize_keyboard=True)
        await update.message.reply_text(
            analysis,
            reply_markup=stats_keyboard,
            parse_mode="HTML"
        )

    elif text == "‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
        if user_id not in favorite_amounts:
            favorite_amounts[user_id] = []
        
        if not favorite_amounts[user_id]:
            message = "–£ –≤–∞—Å –ø–æ–∫–∞ –Ω–µ—Ç –∏–∑–±—Ä–∞–Ω–Ω—ã—Ö —Å—É–º–º.\n–î–æ–±–∞–≤—å—Ç–µ –∏—Ö –ø—Ä–∏ —Ä–∞—Å—á—ë—Ç–µ, –Ω–∞–∂–∞–≤ ‚≠êÔ∏è"
        else:
            message = "‚≠êÔ∏è <b>–í–∞—à–∏ –∏–∑–±—Ä–∞–Ω–Ω—ã–µ —Å—É–º–º—ã:</b>\n\n"
            buy_rate, sell_rate = get_exchange_rates()
            if buy_rate and sell_rate:
                for amount in favorite_amounts[user_id]:
                    buy_result = amount / float(buy_rate.replace(",", "."))
                    sell_result = amount / float(sell_rate.replace(",", "."))
                    message += (
                        f"üí∂ {amount:,.2f} PLN\n"
                        f"üìà {buy_result:,.2f} EUR (–ø–æ–∫—É–ø–∫–∞)\n"
                        f"üìâ {sell_result:,.2f} EUR (–ø—Ä–æ–¥–∞–∂–∞)\n\n"
                    )
        
        fav_keyboard = ReplyKeyboardMarkup([
            ["üóë –û—á–∏—Å—Ç–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"],
            ["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]
        ], resize_keyboard=True)
        await update.message.reply_text(
            message,
            reply_markup=fav_keyboard,
            parse_mode="HTML"
        )

    elif text == "‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏":
        if user_id not in user_settings:
            user_settings[user_id] = {"notifications": True}
        
        notifications_status = "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if user_settings[user_id]["notifications"] else "–≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå"
        settings_keyboard = ReplyKeyboardMarkup([
            ["üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è"],
            ["üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π"],
            ["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]
        ], resize_keyboard=True)
        
        await update.message.reply_text(
            f"‚öôÔ∏è <b>–ù–∞—Å—Ç—Ä–æ–π–∫–∏</b>\n\n"
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è: {notifications_status}\n\n"
            f"–í—ã–±–µ—Ä–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:",
            reply_markup=settings_keyboard,
            parse_mode="HTML"
        )

    elif text == "üí± PLN ‚Üí EUR" or text == "üí± EUR ‚Üí PLN":
        context.user_data["conversion_mode"] = text
        calc_keyboard = ReplyKeyboardMarkup([
            ["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]
        ], resize_keyboard=True)
        currency_from = "PLN" if text == "üí± PLN ‚Üí EUR" else "EUR"
       
        await update.message.reply_text(
            f"üí± <b>–í–≤–µ–¥–∏—Ç–µ —Å—É–º–º—É –≤ {currency_from}:</b>",
            reply_markup=calc_keyboard,
            parse_mode="HTML"
        )

    elif text == "üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤":
        if user_id not in calculation_history:
            calculation_history[user_id] = []
            
        if not calculation_history[user_id]:
            message = "üìã –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤ –ø—É—Å—Ç–∞"
        else:
            message = "üìã <b>–ü–æ—Å–ª–µ–¥–Ω–∏–µ —Ä–∞—Å—á—ë—Ç—ã:</b>\n\n"
            for calc in calculation_history[user_id][-5:]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 —Ä–∞—Å—á—ë—Ç–æ–≤
                message += f"{calc}\n\n"
        
        history_keyboard = ReplyKeyboardMarkup([
            ["üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é"],
            ["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]
        ], resize_keyboard=True)
        await update.message.reply_text(
            message,
            reply_markup=history_keyboard,
            parse_mode="HTML"
        )

    elif text == "üìà –ì—Ä–∞—Ñ–∏–∫ –∫—É—Ä—Å–∞":
        graph_buf = await generate_rate_graph()
        if graph_buf:
            await update.message.reply_photo(
                photo=graph_buf,
                caption="üìà –ì—Ä–∞—Ñ–∏–∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫—É—Ä—Å–∞ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 24 —á–∞—Å–∞"
            )
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –≥—Ä–∞—Ñ–∏–∫.")

    elif text.replace(".", "").isdigit():
        buy_rate, sell_rate = get_exchange_rates()
        if buy_rate and sell_rate:
            try:
                amount = float(text)
                conversion_mode = context.user_data.get("conversion_mode", "üí± PLN ‚Üí EUR")
                
                if conversion_mode == "üí± PLN ‚Üí EUR":
                    buy_result = amount / float(buy_rate.replace(",", "."))
                    sell_result = amount / float(sell_rate.replace(",", "."))
                    message = (
                        f"üí± <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:</b>\n\n"
                        f"–°—É–º–º–∞: {amount:,.2f} PLN\n\n"
                        f"üìà –ü–æ –∫—É—Ä—Å—É –ø–æ–∫—É–ø–∫–∏:\n{buy_result:,.2f} EUR\n\n"
                        f"üìâ –ü–æ –∫—É—Ä—Å—É –ø—Ä–æ–¥–∞–∂–∏:\n{sell_result:,.2f} EUR"
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                    if user_id not in calculation_history:
                        calculation_history[user_id] = []
                    calculation_history[user_id].append(
                        f"üí∂ {amount:,.2f} PLN ‚Üí EUR\n"
                        f"–ü–æ–∫—É–ø–∫–∞: {buy_result:,.2f} EUR\n"
                        f"–ü—Ä–æ–¥–∞–∂–∞: {sell_result:,.2f} EUR"
                    )
                else:
                    buy_result = amount * float(buy_rate.replace(",", "."))
                    sell_result = amount * float(sell_rate.replace(",", "."))
                    message = (
                        f"üí± <b>–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ä–∞—Å—á–µ—Ç–∞:</b>\n\n"
                        f"–°—É–º–º–∞: {amount:,.2f} EUR\n\n"
                        f"üìà –ü–æ –∫—É—Ä—Å—É –ø–æ–∫—É–ø–∫–∏:\n{buy_result:,.2f} PLN\n\n"
                        f"üìâ –ü–æ –∫—É—Ä—Å—É –ø—Ä–æ–¥–∞–∂–∏:\n{sell_result:,.2f} PLN"
                    )
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                    if user_id not in calculation_history:
                        calculation_history[user_id] = []
                    calculation_history[user_id].append(
                        f"üí∂ {amount:,.2f} EUR ‚Üí PLN\n"
                        f"–ü–æ–∫—É–ø–∫–∞: {buy_result:,.2f} PLN\n"
                        f"–ü—Ä–æ–¥–∞–∂–∞: {sell_result:,.2f} PLN"
                    )
                
                context.user_data["last_amount"] = amount
                save_data()

                star_keyboard = ReplyKeyboardMarkup([
                    ["‚≠êÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ"],
                    ["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]
                ], resize_keyboard=True)
                await update.message.reply_text(message, reply_markup=star_keyboard, parse_mode="HTML")
            except ValueError:
                await update.message.reply_text("‚ùå –û—à–∏–±–∫–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Å—É–º–º—ã.")
        else:
            await update.message.reply_text("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∫—É—Ä—Å –¥–ª—è —Ä–∞—Å—á–µ—Ç–∞.")

    elif text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é":
        if user_id in calculation_history:
            calculation_history[user_id] = []
            save_data()
        await update.message.reply_text(
            "‚úÖ –ò—Å—Ç–æ—Ä–∏—è —Ä–∞—Å—á—ë—Ç–æ–≤ –æ—á–∏—â–µ–Ω–∞",
            reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )

    elif text == "‚≠êÔ∏è –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ":
        if "last_amount" in context.user_data:
            if user_id not in favorite_amounts:
                favorite_amounts[user_id] = []
            if context.user_data["last_amount"] not in favorite_amounts[user_id]:
                favorite_amounts[user_id].append(context.user_data["last_amount"])
                save_data()
                await update.message.reply_text("‚úÖ –°—É–º–º–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!")
            else:
                await update.message.reply_text("‚ÑπÔ∏è –≠—Ç–∞ —Å—É–º–º–∞ —É–∂–µ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–º.")
        else:
            await update.message.reply_text("‚ùå –ù–µ—Ç —Å—É–º–º—ã –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ.")

    elif text == "üóë –û—á–∏—Å—Ç–∏—Ç—å –∏–∑–±—Ä–∞–Ω–Ω–æ–µ":
        if user_id in favorite_amounts:
            favorite_amounts[user_id] = []
            save_data()
        await update.message.reply_text(
            "‚úÖ –°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –æ—á–∏—â–µ–Ω",
            reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )

    elif text == "üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è":
        if user_id not in user_settings:
            user_settings[user_id] = {"notifications": True}
        
        user_settings[user_id]["notifications"] = not user_settings[user_id]["notifications"]
        save_data()
        
        status = "–≤–∫–ª—é—á–µ–Ω—ã ‚úÖ" if user_settings[user_id]["notifications"] else "–≤—ã–∫–ª—é—á–µ–Ω—ã ‚ùå"
        await update.message.reply_text(
            f"üîî –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è {status}",
            reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )

    elif text == "üìä –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π":
        schedule_keyboard = ReplyKeyboardMarkup([
            ["üì± –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É" if not is_scheduled else "üö´ –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É"],
            ["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]
        ], resize_keyboard=True)
        status = "–≤–∫–ª—é—á–µ–Ω–∞ ‚úÖ" if is_scheduled else "–æ—Ç–∫–ª—é—á–µ–Ω–∞ ‚ùå"
        await update.message.reply_text(
            f"üìä <b>–£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ —Ä–∞—Å—Å—ã–ª–∫–æ–π</b>\n\n"
            f"–¢–µ–∫—É—â–∏–π —Å—Ç–∞—Ç—É—Å: {status}\n"
            f"–í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: 11:00, 12:00, 15:00, 19:00",
            reply_markup=schedule_keyboard,
            parse_mode="HTML"
        )

    elif text == "üì± –í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É" and not is_scheduled:
        scheduler.remove_all_jobs()
        scheduler.add_job(lambda: asyncio.run(send_rates()), CronTrigger(hour=11, minute=0), id="rate_job_5")
        scheduler.add_job(lambda: asyncio.run(send_rates()), CronTrigger(hour=12, minute=0), id="rate_job_12")
        scheduler.add_job(lambda: asyncio.run(send_rates()), CronTrigger(hour=15, minute=0), id="rate_job_18")
        scheduler.add_job(lambda: asyncio.run(send_rates()), CronTrigger(hour=19, minute=0), id="rate_job_23")
        
        if not scheduler.running:
            scheduler.start()
        
        is_scheduled = True
        await update.message.reply_text(
            "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —É—Å–ø–µ—à–Ω–æ –≤–∫–ª—é—á–µ–Ω–∞!\n"
            "–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è 4 —Ä–∞–∑–∞ –≤ –¥–µ–Ω—å.",
            reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )

    elif text == "üö´ –û—Ç–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—Å—ã–ª–∫—É" and is_scheduled:
        scheduler.remove_all_jobs()
        is_scheduled = False
        await update.message.reply_text(
            "‚ùå –†–∞—Å—Å—ã–ª–∫–∞ –æ—Ç–∫–ª—é—á–µ–Ω–∞.",
            reply_markup=ReplyKeyboardMarkup([["‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é"]], resize_keyboard=True)
        )

    elif text == "‚¨ÖÔ∏è –í–µ—Ä–Ω—É—Ç—å—Å—è –≤ –º–µ–Ω—é":
        main_keyboard = ReplyKeyboardMarkup([
            ["üí∂ –¢–µ–∫—É—â–∏–π –∫—É—Ä—Å", "üßÆ –ö–∞–ª—å–∫—É–ª—è—Ç–æ—Ä"],
            ["üìä –ê–Ω–∞–ª–∏—Ç–∏–∫–∞", "‚≠êÔ∏è –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"],
            ["‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏"]
        ], resize_keyboard=True)
        await update.message.reply_text(
            "üéØ <b>–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é</b>\n\n–í—ã–±–µ—Ä–∏—Ç–µ –Ω—É–∂–Ω—É—é –æ–ø—Ü–∏—é:",
            reply_markup=main_keyboard,
            parse_mode="HTML"
        )

def main():
    load_data()
    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.run_polling()

def create_flask_app():
    app = Flask(__name__)

    @app.route('/status')
    def bot_status():
        return jsonify({
            "status": "running",
            "last_update": datetime.now().strftime("%Y-%m-%d %H:%M:%S"),
            "current_rates": get_exchange_rates()
        })

    @app.route('/rates')
    def get_rates():
        buy_rate, sell_rate = get_exchange_rates()
        return jsonify({
            "buy_rate": buy_rate,
            "sell_rate": sell_rate,
            "timestamp": datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        })

    return app

def run_flask_server():
    app = create_flask_app()
    app.run(host='0.0.0.0', port=5000)

def main():
    load_data()

    # Start Flask server in a separate thread
    flask_thread = Thread(target=run_flask_server)
    flask_thread.start()

    application = Application.builder().token(TOKEN).build()
    application.add_handler(CommandHandler("start", start))
    application.add_handler(MessageHandler(filters.TEXT & ~filters.COMMAND, message_handler))
    application.run_polling()

if __name__ == "__main__":
    main()